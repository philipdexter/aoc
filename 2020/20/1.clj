
(load-file "../common/common.clj")


; (def input-split-lines [
;                         [
;                          "1"
;                          "#.#.#####."
;                          ".#..######"
;                          "..#......."
;                          "######...."
;                          "####.#..#."
;                          ".#...#.##."
;                          "#.#####.##"
;                          "..#.###..."
;                          "..#......."
;                          "..#.###..."
;                          ][
;                            "2"
;                            "..###..###"
;                            "###...#.#."
;                            "..#....#.."
;                            ".#.#.#..##"
;                            "##...#.###"
;                            "##.##.###."
;                            "####.#...#"
;                            "#...##..#."
;                            "##..#....."
;                            "..##.#..#."
;                            ][
;                              "3"
;                              "#...##.#.."
;                              "..#.#..#.#"
;                              ".###....#."
;                              "###.##.##."
;                              ".###.#####"
;                              ".##.#....#"
;                              "#...######"
;                              ".....#..##"
;                              "#.####...#"
;                              "#.##...##."
;                              ][
;                                "4"
;                                "..#.###..."
;                                "##.##....#"
;                                "..#.###..#"
;                                "###.#..###"
;                                ".######.##"
;                                "#.#.#.#..."
;                                "#.###.###."
;                                "#.###.##.."
;                                ".######..."
;                                ".##...####"
;                                ][
;                                  "5"
;                                  "..##.#..#."
;                                  "..#..###.#"
;                                  ".#.####.#."
;                                  "...#.#####"
;                                  "...##..##."
;                                  "....#...##"
;                                  "#.#.#.##.#"
;                                  ".#.##.#..#"
;                                  ".#..#.##.."
;                                  "###.##.#.."
;                                  ][
;                                    "6"
;                                    "#.##...##."
;                                    "##..#.##.."
;                                    "##.####..."
;                                    "####.#.#.."
;                                    ".#.####..."
;                                    ".##..##.#."
;                                    "....#..#.#"
;                                    "..#.#....."
;                                    "####.#...."
;                                    "...#.#.#.#"
;                                    ][
;                                      "7"
;                                      ".##...####"
;                                      "#..#.##..#"
;                                      ".#.#..#.##"
;                                      ".####.###."
;                                      "####.###.."
;                                      ".##....##."
;                                      ".####...#."
;                                      ".####.##.#"
;                                      "...#..####"
;                                      "...##....."
;                                      ][
;                                        "8"
;                                        "###.##.#.."
;                                        "..##.##.##"
;                                        "##.#...##."
;                                        "...#.#.#.."
;                                        "#..#.#.#.#"
;                                        "#####...#."
;                                        "..#...#..."
;                                        ".##..##..."
;                                        "..##...#.."
;                                        "##.#.#...."
;                                        ][
;                                          "9"
;                                          "...#.#.#.#"
;                                          "..#.#.###."
;                                          "..####.###"
;                                          "#..#.#..#."
;                                          ".#..####.#"
;                                          ".#####..##"
;                                          "##.##..#.."
;                                          "#.#.###..."
;                                          "#...###..."
;                                          "..#.#....#"
;                                          ]])

; (def input-split-lines [
;                         [
;                          "Tile 2311:"
;                          "..##.#..#."
;                          "##..#....."
;                          "#...##..#."
;                          "####.#...#"
;                          "##.##.###."
;                          "##...#.###"
;                          ".#.#.#..##"
;                          "..#....#.."
;                          "###...#.#."
;                          "..###..###"
;                          ]
;                         [
;                          "Tile 1951:"
;                          "#.##...##."
;                          "#.####...#"
;                          ".....#..##"
;                          "#...######"
;                          ".##.#....#"
;                          ".###.#####"
;                          "###.##.##."
;                          ".###....#."
;                          "..#.#..#.#"
;                          "#...##.#.."
;                          ]
;                         [
;                          "Tile 1171:"
;                          "####...##."
;                          "#..##.#..#"
;                          "##.#..#.#."
;                          ".###.####."
;                          "..###.####"
;                          ".##....##."
;                          ".#...####."
;                          "#.##.####."
;                          "####..#..."
;                          ".....##..."
;                          ]
;                         [
;                          "Tile 1427:"
;                          "###.##.#.."
;                          ".#..#.##.."
;                          ".#.##.#..#"
;                          "#.#.#.##.#"
;                          "....#...##"
;                          "...##..##."
;                          "...#.#####"
;                          ".#.####.#."
;                          "..#..###.#"
;                          "..##.#..#."
;                          ]
;                         [
;                          "Tile 1489:"
;                          "##.#.#...."
;                          "..##...#.."
;                          ".##..##..."
;                          "..#...#..."
;                          "#####...#."
;                          "#..#.#.#.#"
;                          "...#.#.#.."
;                          "##.#...##."
;                          "..##.##.##"
;                          "###.##.#.."
;                          ]
;                         [
;                          "Tile 2473:"
;                          "#....####."
;                          "#..#.##..."
;                          "#.##..#..."
;                          "######.#.#"
;                          ".#...#.#.#"
;                          ".#########"
;                          ".###.#..#."
;                          "########.#"
;                          "##...##.#."
;                          "..###.#.#."
;                          ]
;                         [
;                          "Tile 2971:"
;                          "..#.#....#"
;                          "#...###..."
;                          "#.#.###..."
;                          "##.##..#.."
;                          ".#####..##"
;                          ".#..####.#"
;                          "#..#.#..#."
;                          "..####.###"
;                          "..#.#.###."
;                          "...#.#.#.#"
;                          ]
;                         [
;                          "Tile 2729:"
;                          "...#.#.#.#"
;                          "####.#...."
;                          "..#.#....."
;                          "....#..#.#"
;                          ".##..##.#."
;                          ".#.####..."
;                          "####.#.#.."
;                          "##.####..."
;                          "##..#.##.."
;                          "#.##...##."
;                          ]
; [
;  "Tile 3079:"
;  "#.#.#####."
;  ".#..######"
;  "..#......."
;  "######...."
;  "####.#..#."
;  ".#...#.##."
;  "#.#####.##"
;  "..#.###..."
;  "..#......."
;  "..#.###..."
;  ]
; ]
; )

(defn parse [tile]
  (let [id (first tile)
        tile (vec (rest tile))
        top (first tile)
        bottom (last tile)
        left (apply str (vec (map first tile)))
        right (apply str(vec (map last tile)))]
    ; [id [top bottom left right]]))
    [[id [top bottom (apply str (reverse left)) (apply str (reverse right))]]
     [id [(apply str (reverse top)) (apply str (reverse bottom)) left right]]
     [id [top bottom left right]]]))

(def tiles (map parse input-split-lines))

(defn permutations [xs]
  (if (empty? xs)
    [[]]
    (for [x (first xs)
          xs (permutations (rest xs))]
      (vec (cons x xs)))))

(defn has-matching [tile edge tiles]
  (some identity (map #(some (partial = edge) (second %)) (filter (fn [x] (not= (first x) (first tile))) tiles))))

(defn get-matching-nums [tiles]
  (for [tile tiles]
    (let [edges (second tile)
          edge-matching (map #(has-matching tile % tiles) edges)]
      [(first tile) (count (filter not edge-matching))])))

(doall (pmap (fn [tiles]
               (let [matching-nums (get-matching-nums tiles)
                     max-missing (apply max (map second matching-nums))
                     corners (filter #(= 2 (second %)) matching-nums)]
                 (if (and (<= max-missing 2) (= (count corners) 4)) (println corners))))
             (permutations tiles)))

()
